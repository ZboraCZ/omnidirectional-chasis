1° = 0.01745329251 rad
21.598449489 = cm rotace podvozku za 1 sekundu pri max rychosti 450

Rozvržení bitù po i2c sbìrnici:
3bity: identif. kod primitiva
4-11 bity: stupnì rotace (max. 255) * 1.4117647058823529411764 do 360 stupòù
12-15 bity: úroveò rychlosti (max. 15) - násobitel základní rychlostí motorù. Násobí se 30ti
16tý bit: Bezpeèností bit pro kontrolu nepoškozené informace.

Kódy pro identifikaci primitiv na prvních 3 bitech:
111: go (úhel smìru jízdy - 0° je vpravo, úroveò rychlosti 0-16, paritní bit)
101: rotate(úhel o kolik toèíme, smìr 0=vlevo, 1=vpravo, paritní bit) //rychlost použita z pøímé jízdy
100: brake(ostatní bity zanedbáváme)
000: stop(ostatní bity zanedbáváme)
001: setSpeed(bity pro rychlost se berou jako parametr rychlosti 0-16, zbytek se zanedbává)
110: turn ---IN THE FUTURE---(úhel jak moc toèíme dokola, smìr 0=vlevo, 1=vpravo, paritní bit) // úhel 360° opíše kruh, rychlost použita z pøímé jízdy



//### Dokumentace z AccelStepper knihovny co je použito v kódu ###
void AccelStepper::setEnablePin	(uint8_t enablePin = 0xff)	
Sets the enable pin number for stepper drivers. 0xFF indicates unused (default). Otherwise, if a pin is set, the pin will be turned on when enableOutputs() is called and switched off when disableOutputs() is called.

Parameters
[in] enablePin - Arduino digital pin number for motor enable
---------------------------------
void AccelStepper::enableOutputs() - ACTUALLY DISABLES MOTOR USAGE ON MY PROJECT	
Enable motor pin outputs by setting the motor pins to OUTPUT mode. Called automatically by the constructor. If the enable Pin is defined, sets it to OUTPUT mode and sets the pin to enabled.
---------------------------------
void AccelStepper::disableOutputs() - ACTUALLY ENABLES MOTOR USAGE ON MY PROJECT
Disable motor pin outputs by setting them all LOW Depending on the design of your electronics this may turn off the power to the motor coils, saving power. 
This is useful to support Arduino low power modes: disable the outputs during sleep and then reenable with enableOutputs() before stepping again. 
If the enable Pin is defined, sets it to OUTPUT mode and clears the pin to disabled.
---------------------------------
void AccelStepper::setMaxSpeed (float speed)	
Sets the maximum permitted speed. The run() function will accelerate up to the speed set by this function. 
Caution: the maximum speed achievable depends on your processor and clock speed. The default maxSpeed is 1.0 steps per second.
Parameters:
[in] speed - The desired maximum speed in steps per second. Must be > 0. Caution: Speeds that exceed the maximum speed supported by the processor may Result in non-linear 
accelerations and decelerations.
---------------------------------
void AccelStepper::setSpeed (float speed)	
Sets the desired constant speed for use with runSpeed().
Parameters:
[in] speed - The desired constant speed in steps per second. Positive is clockwise. Speeds of more than 1000 steps per second are unreliable. 
Very slow speeds may be set (eg 0.00027777 for once per hour, approximately. Speed accuracy depends on the Arduino crystal. 
Jitter depends on how frequently you call the runSpeed() function. The speed will be limited by the current value of setMaxSpeed().
----------------------
boolean AccelStepper::runSpeed()	
Poll the motor and step it if a step is due, implementing a constant speed as set by the most recent call to setSpeed(). 
You must call this as frequently as possible, but at least once per step interval,
Returns: true if the motor was stepped.
----------------------
void AccelStepper::setCurrentPosition(long position)
Resets the current position of the motor, so that wherever the motor happens to be right now is considered to be the new 0 position. 
Useful for setting a zero position on a stepper after an initial hardware positioning move. Has the side effect of setting the current motor speed to 0.
Parameters
[in] position - The position in steps of wherever the motor happens to be right now.