1° = 0.01745329251 rad

Rozvržení bitù po i2c sbìrnici:
3bity: identif. kod primitiva
4-10 bity: stupnì rotace (max. 128) * 2.8125 do 360 stupòù
11 - 15 bity: vzdálenost v cm. (max. 32) * 15.625 do 500 cm (budeme mit dojezd 5 metrù)
16tý bit: Bezpeèností bit pro kontrolu nepoškozené informace.

Kódy pro identifikaci primitiv na prvních 3 bitech:
111: go (úhel smìru jízdy - 0° je vpravo, vzdálenost v cm)
110: turn (úhel jak moc toèíme dokola, polomìr v cm) // úhel 360° opíše kruh
101: rotate(úhel o kolik toèíme, cm se zanedbává)
100: brake(ostatní bity zanedbáváme)
000: stop(ostatní bity zanedbáváme)
001: setSpeed(bity pro úhel se berou jako parametr rychlosti)

//### Dokumentace AccelStepper knihovny k použití ###
void AccelStepper::setMaxSpeed (float speed)	
Sets the maximum permitted speed. The run() function will accelerate up to the speed set by this function. 
Caution: the maximum speed achievable depends on your processor and clock speed. The default maxSpeed is 1.0 steps per second.
Parameters:
[in] speed - The desired maximum speed in steps per second. Must be > 0. Caution: Speeds that exceed the maximum speed supported by the processor may Result in non-linear 
accelerations and decelerations.
---------------------------------
void AccelStepper::setSpeed (float speed)	
Sets the desired constant speed for use with runSpeed().
Parameters:
[in] speed - The desired constant speed in steps per second. Positive is clockwise. Speeds of more than 1000 steps per second are unreliable. 
Very slow speeds may be set (eg 0.00027777 for once per hour, approximately. Speed accuracy depends on the Arduino crystal. 
Jitter depends on how frequently you call the runSpeed() function. The speed will be limited by the current value of setMaxSpeed().
----------------------
boolean AccelStepper::runSpeed()	
Poll the motor and step it if a step is due, implementing a constant speed as set by the most recent call to setSpeed(). 
You must call this as frequently as possible, but at least once per step interval,
Returns: true if the motor was stepped.



Aktualní nejasnosti k vyzkoušení:
-Spusti se metody step() za sebou u všech motorù najednou nebo se u každé èeká na její dokonèení?

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
  if (this->pin_count == 2) {
    switch (thisStep) {
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 2:  // 10
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
      break;
    }
  }
}
